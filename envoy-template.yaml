#
# Copyright (c) 2021 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This template creates the configmap that contains the configuration of the
# Envoy proxy that is in front of the service. Note that this is only used in
# development environments. In the integration, stage and production
# environmens this configmap is defined in app-interface.

apiVersion: v1
kind: Template
metadata:
  name: envoy
objects:

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: events-mgmt-server-envoy
  data:
    main.yaml: |
      # The administration endpoint uses a Unix socket instead of TCP in order
      # to avoid exposing it outside of the pod. Requests for metrics and
      # probes will go via an HTTP listener that only accepts requests for the
      # /metrics and /ready paths.
      admin:
        access_log_path: /dev/null
        address:
          pipe:
            path: /var/lib/events-mgmt/sockets.d/admin.socket

      static_resources:

        clusters:

        # This backend is used to send metrics and probes requests to the
        # administration endpoint.
        - name: admin
          connect_timeout: 1s
          type: STATIC
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: admin
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    pipe:
                      path: /var/lib/events-mgmt/sockets.d/admin.socket

        # This cluster is used to send requests to the backend.
        - name: backend
          connect_timeout: 1s
          type: STATIC
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: backend
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    pipe:
                      path: /var/lib/events-mgmt/sockets.d/ingress.socket

        # This cluster is used to send request to the rate limiting service.
        - name: limiter
          connect_timeout: 1s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          http2_protocol_options: {}
          load_assignment:
            cluster_name: limiter
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: limitador.app-sre-rate-limit.svc
                      port_value: 8081

        # This cluster is used to send outbound API requests to the other OCM
        # services. In the development scenario, which is where this template
        # is used, this will always go via the API gateway of the integration
        # environment.
        - name: gateway
          connect_timeout: 1s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: gateway
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: api.integration.openshift.com
                      port_value: 443
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
              common_tls_context:
                validation_context:
                  trusted_ca:
                    filename: /etc/ssl/certs/ca-certificates.crt

        listeners:

        # This listener is used to accept /metrics and /ready requests.
        # Everything else will be rejected.
        - name: admin
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9000
          filter_chains:
          - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: admin
                route_config:
                  name: admin
                  virtual_hosts:
                  - name: admin
                    domains:
                    - "*"
                    routes:
                    - name: ready
                      match:
                        path: /ready
                      route:
                        cluster: admin
                    - name: metrics
                      match:
                        path: /metrics
                      route:
                        cluster: admin
                        prefix_rewrite: /stats/prometheus
                http_filters:
                - name: envoy.filters.http.router

        # This listener is used to accept inbound API requests.
        - name: ingress
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 9001
          filter_chains:
          - transport_socket:
              name: envoy.transport_sockets.tls
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
                common_tls_context:
                  tls_certificates:
                  - certificate_chain:
                      filename: /var/lib/events-mgmt/tls.d/tls.crt
                    private_key:
                      filename: /var/lib/events-mgmt/tls.d/tls.key
            filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: /dev/stdout
                use_remote_address: true
                xff_num_trusted_hops: 1
                stat_prefix: ingress
                route_config:
                  name: backend
                  virtual_hosts:
                  - name: all
                    domains:
                    - "*"
                    routes:

                    # This is an example of how to define a rate limit for a
                    # specific path.
                    - name: register_cluster
                      match:
                        path: /api/events_mgmt/v1/events
                      route:
                        cluster: backend
                        timeout: 300s
                        rate_limits:
                        - actions:
                          - generic_key:
                              descriptor_key: path
                              descriptor_value: events

                    # Traffic for our service. Note that the timeout should be
                    # long enough to make the long polling mechanism usable.
                    # Also it should be equal to the timeout of the route.
                    - name: events_mgmt
                      match:
                        prefix: /api/events_mgmt
                      route:
                        cluster: backend
                        auto_host_rewrite: true
                        timeout: 3600s

                    # Traffic for other services:
                    - name: default
                      match:
                        prefix: /
                      route:
                        cluster: gateway
                        auto_host_rewrite: true
                        timeout: 300s

                http_filters:

                # This is needed to enable the rate limiter, and to specify how
                # and where to connect to it.
                - name: envoy.filters.http.ratelimit
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
                    domain: development:events_mgmt
                    failure_mode_deny: false
                    timeout: 0.05s
                    rate_limit_service:
                      grpc_service:
                        envoy_grpc:
                          cluster_name: limiter
                      transport_api_version: V3

                # This is mandatory in order to have the HTTP routes above.
                - name: envoy.filters.http.router

                # We need this in order to generate JSON responses according to
                # our API guidelines, otherwise Envoy will generate plain text
                # responses.
                local_reply_config:
                  mappers:
                  - filter:
                      status_code_filter:
                        comparison:
                          op: EQ
                          value:
                            default_value: 429
                            runtime_key: none
                    body_format_override:
                      json_format:
                        kind: "Error"
                        id: "429"
                        href: "/api/events_mgmt/v1/errors/429"
                        code: "EVENTS-MGMT-429"
                        reason: "Too Many Requests"

        # This listener is used to process outbound API requests.
        - name: egress
          address:
            pipe:
              path: /var/lib/events-mgmt/sockets.d/egress.socket
          filter_chains:
            filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: /dev/stdout
                stat_prefix: egress
                route_config:
                  name: default
                  virtual_hosts:
                  - name: all
                    domains:
                    - "*"
                    routes:

                    # Send requests to other OCM services.
                      match:
                        prefix: /
                      route:
                        cluster: gateway
                        auto_host_rewrite: true
                        timeout: 300s

                http_filters:
                - name: envoy.filters.http.router
