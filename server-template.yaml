#
# Copyright (c) 2021 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains an OpenShift template that creates all the objects needed
# for a working installation of the events server.

apiVersion: v1
kind: Template
metadata:
  name: server
parameters:

- name: NAMESPACE
  description: Namespace where the broker is running.

- name: INSTALL
  description: Indicates if required topics should be created.
  value: "false"

- name: IMAGE_REGISTRY
  description: Image registry.

- name: IMAGE_REPOSITORY
  description: Image repository.

- name: IMAGE_TAG
  description: Image tag.

- name: REPLICAS
  description: Number of replicas to run.
  value: "1"

- name: GATEWAY_URL
  description: URL of the gateway.

- name: ENVOY_IMAGE
  description: Envoy image.
  value: quay.io/app-sre/envoyproxy:v1.18.3

- name: MEMORY_REQUEST
  description: Memory request.
  value: "150Mi"

- name: MEMORY_LIMIT
  description: Memory limit.
  value: "1Gi"

- name: CPU_REQUEST
  description: CPU request.
  value: "50m"

- name: CPU_LIMIT
  description: CPU limit.
  value: "1"

objects:

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: events-mgmt-server
    labels:
      app: events-mgmt-server
  data:
    main.yaml: |
      # Log configuration:
      log:
        level: debug

      # Indicates if topics should be created:
      install: ${INSTALL}

      # Listeners:
      listeners:
        api:
          network: unix
          address: /var/lib/events-mgmt/sockets.d/ingress.socket
        health:
          network: tcp
          address: :8001

      # Settings to connect to other services:
      connection:
        url: ${GATEWAY_URL}
        client_id: !file/trim /var/lib/events-mgmt/secrets.d/client.id
        client_secret: !file/trim /var/lib/events-mgmt/secrets.d/client.secret

      # Kafka settings:
      kafka:
        brokers:
        - events-mgmt-broker.${NAMESPACE}.svc:9092
        tls:
          ca: !file /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt

        topic: ocm.events

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: events-mgmt-server
    labels:
      app: events-mgmt-server
  spec:
    selector:
      matchLabels:
        app: events-mgmt-server
    replicas: ${{REPLICAS}}
    template:
      metadata:
        labels:
          app: events-mgmt-server
      spec:
        volumes:
        - name: secrets
          secret:
            secretName: events-mgmt-server
        - name: configs
          configMap:
            name: events-mgmt-server
        - name: tls
          secret:
            secretName: events-mgmt-server-tls
        - name: envoy
          configMap:
            name: events-mgmt-server-envoy
        - name: sockets
          emptyDir:
            medium: Memory
        containers:
        - name: envoy
          image: ${ENVOY_IMAGE}
          volumeMounts:
          - name: tls
            mountPath: /var/lib/events-mgmt/tls.d
          - name: envoy
            mountPath: /etc/events-mgmt/envoy.d
          - name: sockets
            mountPath: /var/lib/events-mgmt/sockets.d
          command:
          - envoy
          - --config-path
          - /etc/events-mgmt/envoy.d/main.yaml
          ports:
          - name: envoy-api
            protocol: TCP
            containerPort: 9001
          - name: envoy-metrics
            protocol: TCP
            containerPort: 9000
          livenessProbe:
            httpGet:
              path: /ready
              port: 9000
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 9000
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          resources:
            requests:
              memory: 128Mi
              cpu: 250m
            limits:
              memory: 256Mi
              cpu: 500m
        - name: server
          image: ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}:${IMAGE_TAG}
          volumeMounts:
          - name: configs
            mountPath: /etc/events-mgmt/configs.d
          - name: secrets
            mountPath: /var/lib/events-mgmt/secrets.d
          - name: sockets
            mountPath: /var/lib/events-mgmt/sockets.d
          command:
          - /bin/events-mgmt
          - server
          - /etc/events-mgmt/configs.d
          livenessProbe:
            exec:
              command:
              - "/usr/bin/curl"
              - "--unix-socket"
              - "/var/lib/events-mgmt/sockets.d/ingress.socket"
              - "--header"
              - "User-Agent: Probe"
              - "http://localhost"
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: 8001
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            requests:
              memory: ${MEMORY_REQUEST}
              cpu: ${CPU_REQUEST}
            limits:
              memory: ${MEMORY_LIMIT}
              cpu: ${CPU_LIMIT}

- apiVersion: v1
  kind: Service
  metadata:
    name: events-mgmt-server
    labels:
      app: events-mgmt-server
      port: api
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: events-mgmt-server-tls
  spec:
    selector:
      app: events-mgmt-server
    ports:
    - port: 9001
      targetPort: 9001
    clusterIP: None
