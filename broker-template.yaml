#
# Copyright (c) 2021 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains an OpenShift template that creates all the objects needed
# for the Kafka broker used in the development environment.

apiVersion: v1
kind: Template
metadata:
  name: broker
parameters:

- name: NAMESPACE
  description: Namespace where the broker is running.

objects:

- apiVersion: v1
  kind: Service
  metadata:
    name: events-mgmt-broker
    labels:
      app: events-mgmt-broker
    annotations:
      service.beta.openshift.io/serving-cert-secret-name: events-mgmt-broker-tls
  spec:
    selector:
      app: events-mgmt-broker
    ports:
    - name: broker
      port: 9092
      targetPort: 9092
    - name: controller
      port: 9093
      targetPort: 9093

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: events-mgmt-broker
  data:
    broker.properties: |
      # Basic configuration:
      node.id=1
      process.roles=broker,controller
      log.dirs=/opt/kafka/data
      listeners=BROKER://:9092,CONTROLLER://:9093
      advertised.listeners=BROKER://events-mgmt-broker.${NAMESPACE}.svc:9092
      auto.create.topics.enable=true
      controller.listener.names=CONTROLLER
      inter.broker.listener.name=BROKER
      controller.quorum.voters=1@events-mgmt-broker.${NAMESPACE}.svc:9093

      # In the development environment we have only one broker, so we need to
      # set the replication factor of internal topics to one:
      offsets.topic.replication.factor=1
      transaction.state.log.replication.factor=1
      transaction.state.log.min.isr=1

      # Enable TLS:
      listener.security.protocol.map=BROKER:SSL,CONTROLLER:SSL
      ssl.keystore.type=PKCS12
      ssl.keystore.location=/opt/kafka/data/tls.p12
      ssl.keystore.password=password
      ssl.truststore.type=PKCS12
      ssl.truststore.location=/opt/kafka/data/service-ca.p12
      ssl.truststore.password=password

    broker-log4j.properties: |
      log4j.rootLogger=INFO, stdout
      log4j.appender.stdout=org.apache.log4j.ConsoleAppender
      log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
      log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

    tools-log4j.properties: |
      log4j.rootLogger=WARN, stderr
      log4j.appender.stderr=org.apache.log4j.ConsoleAppender
      log4j.appender.stderr.layout=org.apache.log4j.PatternLayout
      log4j.appender.stderr.layout.ConversionPattern=[%d] %p %m (%c)%n
      log4j.appender.stderr.Target=System.err

- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: events-mgmt-broker
    labels:
      app: events-mgmt-broker
  spec:
    selector:
      matchLabels:
        app: events-mgmt-broker
    replicas: 1
    template:
      metadata:
        labels:
          app: events-mgmt-broker
      spec:
        volumes:
        - name: config
          configMap:
            name: events-mgmt-broker
        - name: tls
          secret:
            secretName: events-mgmt-broker-tls
        - name: data
          emptyDir: {}
        initContainers:
        - name: init
          image: quay.io/jhernand/kafka:latest
          volumeMounts:
          - name: config
            mountPath: /opt/kafka/config
          - name: tls
            mountPath: /opt/kafka/tls
          - name: data
            mountPath: /opt/kafka/data
          env:
          - name: KAFKA_LOG4J_OPTS
            value: "-Dlog4j.configuration=file:/opt/kafka/config/tools-log4j.properties"
          - name: KAFKA_HEAP_OPTS
            value: "-Xmx512m"
          - name: EXTRA_ARGS
            value: ""
          command:
          - bash
          - -c
          - |
            # Format the storage:
            /opt/kafka/bin/kafka-storage.sh format \
            --config=/opt/kafka/config/broker.properties \
            --cluster-id=LC01NDObQIu58SkUU3RwJg

            # Convert the service CA certificate to PKCS12. Note that this needs
            # to be done with tye 'keytool' command and the 'trustcacerts'
            # option because otherwise the resulting PKCS12 file will not
            # contain the bag attribute that identifies the certificate as a trust
            # anchor.
            keytool \
            -import \
            -trustcacerts \
            -alias service-ca \
            -file /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt \
            -keystore /opt/kafka/data/service-ca.p12 \
            -storepass password \
            -noprompt

            # Convert the TLS certificate and key to PKCS12. This is done with
            # the 'openssl pkcs12' command because the 'keytool' command doesn't
            # support this directly.
            openssl pkcs12 \
            -export \
            -in /opt/kafka/tls/tls.crt \
            -inkey /opt/kafka/tls/tls.key \
            -name tls \
            -out /opt/kafka/data/tls.p12 \
            -passout pass:password

        containers:
        - name: broker
          image: quay.io/jhernand/kafka:latest
          volumeMounts:
          - name: config
            mountPath: /opt/kafka/config
          - name: data
            mountPath: /opt/kafka/data
          env:
          - name: KAFKA_LOG4J_OPTS
            value: "-Dlog4j.configuration=file:/opt/kafka/config/broker-log4j.properties"
          - name: KAFKA_HEAP_OPTS
            value: "-Xmx512m"
          - name: EXTRA_ARGS
            value: ""
          command:
          - /opt/kafka/bin/kafka-server-start.sh
          - /opt/kafka/config/broker.properties
          ports:
          - containerPort: 9092
            protocol: TCP
